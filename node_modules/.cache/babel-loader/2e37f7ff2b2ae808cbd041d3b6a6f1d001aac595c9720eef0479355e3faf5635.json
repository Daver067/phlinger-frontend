{"ast":null,"code":"var _jsxFileName = \"/Users/davediemert/Repos/phone-phlinger/frontend/src/Components/ProtectedRoute.js\",\n  _s = $RefreshSig$();\n// ProtectedRoute.tsx\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../useAuth\";\n// We are taking in the component that should be rendered if the user is authed\n// We are also passing the rest of the props to the <Route /> component such as\n// exact & the path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  Component,\n  ...rest\n}) => {\n  _s();\n  // Getting the value from our cool custom hook\n  const {\n    authed\n  } = useAuth();\n  if (authed) {\n    return /*#__PURE__*/_jsxDEV(Component, {\n      ...rest,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  } else {\n    // If they are not then we need to redirect to a public page\n    return /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(ProtectedRoute, \"OHMEOqTJMGdqqRqI1/c/Jh8CBso=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Route","Redirect","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","Component","rest","_s","authed","props","fileName","_jsxFileName","lineNumber","columnNumber","Home","_c","$RefreshReg$"],"sources":["/Users/davediemert/Repos/phone-phlinger/frontend/src/Components/ProtectedRoute.js"],"sourcesContent":["// ProtectedRoute.tsx\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../useAuth\";\n// We are taking in the component that should be rendered if the user is authed\n// We are also passing the rest of the props to the <Route /> component such as\n// exact & the path\nconst ProtectedRoute = ({ Component, ...rest }) => {\n  // Getting the value from our cool custom hook\n  const { authed } = useAuth();\n\n  if (authed) {\n    return <Component {...rest} {...props} />;\n  } else {\n    // If they are not then we need to redirect to a public page\n    return <Home />;\n  }\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGP,OAAO,CAAC,CAAC;EAE5B,IAAIO,MAAM,EAAE;IACV,oBAAOL,OAAA,CAACE,SAAS;MAAA,GAAKC,IAAI;MAAA,GAAMG;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC3C,CAAC,MAAM;IACL;IACA,oBAAOV,OAAA,CAACW,IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjB;AACF,CAAC;AAACN,EAAA,CAVIH,cAAc;EAAA,QAECH,OAAO;AAAA;AAAAc,EAAA,GAFtBX,cAAc;AAYpB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}