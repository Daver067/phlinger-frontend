{"ast":null,"code":"var _jsxFileName = \"/Users/davediemert/Repos/phone-phlinger/frontend/src/Components/ProtectedRoute.js\",\n  _s = $RefreshSig$();\n// ProtectedRoute.tsx\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../useAuth\";\n// We are taking in the component that should be rendered if the user is authed\n// We are also passing the rest of the props to the <Route /> component such as\n// exact & the path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  Component,\n  ...rest\n}) => {\n  _s();\n  // Getting the value from our cool custom hook\n  const {\n    authed\n  } = useAuth();\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => {\n      // If the user is authed render the component\n      if (authed) {\n        return /*#__PURE__*/_jsxDEV(Component, {\n          ...rest,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 18\n        }, this);\n      } else {\n        // If they are not then we need to redirect to a public page\n        return /*#__PURE__*/_jsxDEV(Route, {\n          to: {\n            pathname: \"/\",\n            state: {\n              from: props.location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(ProtectedRoute, \"OHMEOqTJMGdqqRqI1/c/Jh8CBso=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Route","Redirect","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","Component","rest","_s","authed","render","props","fileName","_jsxFileName","lineNumber","columnNumber","to","pathname","state","from","location","_c","$RefreshReg$"],"sources":["/Users/davediemert/Repos/phone-phlinger/frontend/src/Components/ProtectedRoute.js"],"sourcesContent":["// ProtectedRoute.tsx\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../useAuth\";\n// We are taking in the component that should be rendered if the user is authed\n// We are also passing the rest of the props to the <Route /> component such as\n// exact & the path\nconst ProtectedRoute = ({ Component, ...rest }) => {\n  // Getting the value from our cool custom hook\n  const { authed } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        // If the user is authed render the component\n        if (authed) {\n          return <Component {...rest} {...props} />;\n        } else {\n          // If they are not then we need to redirect to a public page\n          return (\n            <Route\n              to={{\n                pathname: \"/\",\n                state: {\n                  from: props.location,\n                },\n              }}\n            />\n          );\n        }\n      }}\n    />\n  );\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,SAASC,OAAO,QAAQ,YAAY;AACpC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGP,OAAO,CAAC,CAAC;EAE5B,oBACEE,OAAA,CAACJ,KAAK;IAAA,GACAO,IAAI;IACRG,MAAM,EAAGC,KAAK,IAAK;MACjB;MACA,IAAIF,MAAM,EAAE;QACV,oBAAOL,OAAA,CAACE,SAAS;UAAA,GAAKC,IAAI;UAAA,GAAMI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAC3C,CAAC,MAAM;QACL;QACA,oBACEX,OAAA,CAACJ,KAAK;UACJgB,EAAE,EAAE;YACFC,QAAQ,EAAE,GAAG;YACbC,KAAK,EAAE;cACLC,IAAI,EAAER,KAAK,CAACS;YACd;UACF;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAEN;IACF;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACP,EAAA,CA3BIH,cAAc;EAAA,QAECH,OAAO;AAAA;AAAAmB,EAAA,GAFtBhB,cAAc;AA6BpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}