{"ast":null,"code":"var _jsxFileName = \"/Users/davediemert/Repos/phone-phlinger/frontend/src/useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// /src/hooks/useAuth.tsx\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\nimport { getSessionCookie, setSessionCookie } from \"../sessions\";\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Using the useState hook to keep track of the value authed (if a\n  // user is logged in)\n  const [authed, setAuthed] = useState(false);\n  const login = () => {\n    try {\n      fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          password: password,\n          email: email\n        })\n      }).then(response => {\n        if (response.status == 200) {\n          setRedirect(true);\n        }\n        return response.json();\n      }).then(data => {\n        if (data.error) {\n          setErrormsg(data.error);\n        } else {\n          setErrormsg(\"Redirecting\");\n          setSessionCookie(JSON.stringify(data));\n          setAuthed(true);\n        }\n      });\n    } catch (error) {\n      if (error.response.status === 401) {\n        alert(\"Invalid credentials\");\n      }\n    }\n  };\n  const logout = () => {\n    dropCookie();\n    console.log(\"The User has logged out\");\n    setAuthed(false);\n  };\n  return (\n    /*#__PURE__*/\n    // Using the provider so that ANY component in our application can\n    // use the values that we are sending.\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        authed,\n        setAuthed,\n        login,\n        logout\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Finally creating the custom hook\n_s(AuthProvider, \"yj23o1tvKS/8kbW7134qNZuYnyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","createContext","useContext","useEffect","getSessionCookie","setSessionCookie","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authed","setAuthed","login","fetch","method","headers","body","JSON","stringify","password","email","then","response","status","setRedirect","json","data","error","setErrormsg","alert","logout","dropCookie","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/davediemert/Repos/phone-phlinger/frontend/src/useAuth.js"],"sourcesContent":["// /src/hooks/useAuth.tsx\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\nimport { getSessionCookie, setSessionCookie } from \"../sessions\";\n\n// Create the context\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  // Using the useState hook to keep track of the value authed (if a\n  // user is logged in)\n  const [authed, setAuthed] = useState(false);\n\n  const login = () => {\n    try {\n      fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          password: password,\n          email: email,\n        }),\n      })\n        .then((response) => {\n          if (response.status == 200) {\n            setRedirect(true);\n          }\n          return response.json();\n        })\n        .then((data) => {\n          if (data.error) {\n            setErrormsg(data.error);\n          } else {\n            setErrormsg(\"Redirecting\");\n            setSessionCookie(JSON.stringify(data));\n            setAuthed(true);\n          }\n        });\n    } catch (error) {\n      if (error.response.status === 401) {\n        alert(\"Invalid credentials\");\n      }\n    }\n  };\n\n  const logout = () => {\n    dropCookie();\n    console.log(\"The User has logged out\");\n    setAuthed(false);\n  };\n\n  return (\n    // Using the provider so that ANY component in our application can\n    // use the values that we are sending.\n    <AuthContext.Provider value={{ authed, setAuthed, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Finally creating the custom hook\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,aAAa;;AAEhE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMc,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAI;MACFC,KAAK,CAAC,6BAA6B,EAAE;QACnCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAEA,QAAQ;UAClBC,KAAK,EAAEA;QACT,CAAC;MACH,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;UAC1BC,WAAW,CAAC,IAAI,CAAC;QACnB;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;QACd,IAAIA,IAAI,CAACC,KAAK,EAAE;UACdC,WAAW,CAACF,IAAI,CAACC,KAAK,CAAC;QACzB,CAAC,MAAM;UACLC,WAAW,CAAC,aAAa,CAAC;UAC1BzB,gBAAgB,CAACc,IAAI,CAACC,SAAS,CAACQ,IAAI,CAAC,CAAC;UACtCf,SAAS,CAAC,IAAI,CAAC;QACjB;MACF,CAAC,CAAC;IACN,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACL,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QACjCM,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBC,UAAU,CAAC,CAAC;IACZC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCtB,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;EAED;IAAA;IACE;IACA;IACAN,OAAA,CAACC,WAAW,CAAC4B,QAAQ;MAACC,KAAK,EAAE;QAAEzB,MAAM;QAAEC,SAAS;QAAEC,KAAK;QAAEkB;MAAO,CAAE;MAAAtB,QAAA,EAC/DA;IAAQ;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;AAE3B,CAAC;;AAED;AAAA9B,EAAA,CAtDaF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAuDzB,OAAO,MAAMkC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM1C,UAAU,CAACM,WAAW,CAAC;AAAA;AAACoC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}