{"ast":null,"code":"var _jsxFileName = \"/Users/davediemert/Repos/phone-phlinger/frontend/src/Components/ProtectedRoute.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// ProtectedRoute.tsx\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../useAuth\";\nimport Home from \"./Home/Home\";\n// We are taking in the component that should be rendered if the user is authed\n// We are also passing the rest of the props to the <Route /> component such as\n// exact & the path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  Component,\n  ...rest\n}) => {\n  _s();\n  // Getting the value from our cool custom hook\n  const {\n    authed\n  } = useAuth();\n  if (authed) {\n    return /*#__PURE__*/_jsxDEV(\"theComponent\", {\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  } else {\n    // If they are not then we need to redirect to a public page\n    console.log(\"not authed\");\n    return /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(ProtectedRoute, \"OHMEOqTJMGdqqRqI1/c/Jh8CBso=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nexport const Protected = Component => {\n  _s2();\n  const {\n    authed\n  } = useAuth();\n  if (authed) return Component;else return /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 15\n  }, this);\n};\n_s2(Protected, \"OHMEOqTJMGdqqRqI1/c/Jh8CBso=\", false, function () {\n  return [useAuth];\n});\n_c2 = Protected;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"Protected\");","map":{"version":3,"names":["React","Route","Redirect","useAuth","Home","jsxDEV","_jsxDEV","ProtectedRoute","Component","rest","_s","authed","fileName","_jsxFileName","lineNumber","columnNumber","console","log","_c","Protected","_s2","_c2","$RefreshReg$"],"sources":["/Users/davediemert/Repos/phone-phlinger/frontend/src/Components/ProtectedRoute.js"],"sourcesContent":["// ProtectedRoute.tsx\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../useAuth\";\nimport Home from \"./Home/Home\";\n// We are taking in the component that should be rendered if the user is authed\n// We are also passing the rest of the props to the <Route /> component such as\n// exact & the path\nconst ProtectedRoute = ({ Component, ...rest }) => {\n  // Getting the value from our cool custom hook\n  const { authed } = useAuth();\n\n  if (authed) {\n    return <theComponent {...rest} />;\n  } else {\n    // If they are not then we need to redirect to a public page\n    console.log(\"not authed\");\n    return <Home />;\n  }\n};\n\nexport default ProtectedRoute;\n\nexport const Protected = (Component) => {\n  const { authed } = useAuth();\n  if (authed) return Component;\n  else return <Home />;\n};\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,IAAI,MAAM,aAAa;AAC9B;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGR,OAAO,CAAC,CAAC;EAE5B,IAAIQ,MAAM,EAAE;IACV,oBAAOL,OAAA;MAAA,GAAkBG;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnC,CAAC,MAAM;IACL;IACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,oBAAOX,OAAA,CAACF,IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjB;AACF,CAAC;AAACL,EAAA,CAXIH,cAAc;EAAA,QAECJ,OAAO;AAAA;AAAAe,EAAA,GAFtBX,cAAc;AAapB,eAAeA,cAAc;AAE7B,OAAO,MAAMY,SAAS,GAAIX,SAAS,IAAK;EAAAY,GAAA;EACtC,MAAM;IAAET;EAAO,CAAC,GAAGR,OAAO,CAAC,CAAC;EAC5B,IAAIQ,MAAM,EAAE,OAAOH,SAAS,CAAC,KACxB,oBAAOF,OAAA,CAACF,IAAI;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtB,CAAC;AAACK,GAAA,CAJWD,SAAS;EAAA,QACDhB,OAAO;AAAA;AAAAkB,GAAA,GADfF,SAAS;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}